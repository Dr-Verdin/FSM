library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity fsm is
    Port (
        SW0 : in  STD_LOGIC;  -- reset assincrono ativo baixo
        SW1 : in  STD_LOGIC;  -- Input w
        KEY0 : in  STD_LOGIC; -- Clock input
        LEDR : out STD_LOGIC_VECTOR(9 downto 0) -- LED output
    );
end fsm;

architecture Behavioral of fsm is
    signal state : STD_LOGIC_VECTOR(8 downto 0) := "000000001"; -- stado inicial y0
	 signal z : std_logic := '0'; -- saida

begin
	-- logica de saida
	LEDR(9) <= z; -- CONECTA A SAIDA Z AO LED 9
	LEDr(8 downto 0) <= state; -- conecta os estados aos leds

	-- processo de transição de estados
    process (KEY0, SW0)
    begin
        if SW0 = '0' then
            state <= "000000001"; -- reset para o estado y0 
            z <= '0'; 
        elsif rising_edge(KEY0) then
            case state is
                when "000000001" => -- estado y0
                    if SW1 = '1' then
                        state <= "000000010"; -- vai para y1
                    else
                        state <= "000100000"; -- vai para y5
                    end if;

                when "000000010" => -- y1
                    if SW1 = '1' then
                        state <= "000000100"; -- vai para y2
                    else
                        state <= "000100000"; -- vai para y5
                    end if;

                when "000000100" => -- y2
                    if SW1 = '1' then
                        state <= "000001000"; -- vai para y3
                    else
                        state <= "000100000"; -- vai para y5
                    end if;

                when "000001000" => -- y3
                    if SW1 = '1' then
                        state <= "000010000"; -- vai para y4 (z=1)
								z <= '1';
                    else
                        state <= "000100000"; -- Go to S5
                    end if;

                when "000010000" => -- y4 (z=1)
                    if SW1 = '1' then
                        state <= "000010000"; -- fica em y4 (z=1)
								z <= '1';
                    else
                        state <= "000100000"; -- vai para y5
                    end if;

                when "000100000" => -- y5
                    if SW1 = '1' then
                        state <= "000000010"; -- vai para y1
                    else
                        state <= "001000000"; -- vai para y6
                    end if;

                when "001000000" => -- y6
                    if SW1 = '1' then
                        state <= "000000010"; -- vai para y1
                    else
                        state <= "010000000"; -- vai para y7
                    end if;

                when "010000000" => -- y7
                    if SW1 = '1' then
                        state <= "000000010"; -- vai para y1
                    else
                        state <= "100000000"; -- vai para y8
                    end if;

                when "100000000" => -- y8 (z=1)
                    if SW1 = '1' then
                        state <= "000000010"; -- vai para y1
                    else
                        state <= "100000000"; -- permanece em y8 (z=1)
								z <= '1';
                    end if;

                when others =>
                    state <= (others => '0'); -- Default case
            end case;
        end if;
    end process;

    -- Assign outputs to LEDs
    LEDR(0) <= state(0); -- S0
    LEDR(1) <= state(1); -- S1
    LEDR(2) <= state(2); -- S2
    LEDR(3) <= state(3); -- S3
    LEDR(4) <= state(4); -- S4
    LEDR(5) <= state(5); -- S5
    LEDR(6) <= state(6); -- S6
    LEDR(7) <= state(7); -- S7
    LEDR(8) <= state(8); -- S8
    LEDR(9) <= state(4) or state(8); -- z output (LEDR9)

end Behavioral;